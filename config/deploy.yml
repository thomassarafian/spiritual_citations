# Name of your application. Used to uniquely configure containers.
service: spiritual_citations

# Name of the container image.
image: thomassarafian/spiritual_citations

# Deploy to Railway.app (they provide the server)
servers:
  web:
    - railway.app

# Enable SSL auto certification via Let's Encrypt
proxy:
  ssl: true
  host: spiritual-citations.railway.app

# Credentials for Docker Hub (where we store our image)
registry:
  # Docker Hub registry
  username: thomassarafian
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    SOLID_QUEUE_IN_PUMA: true
    
    # Railway.app specific environment variables
    PORT: 3000
    RAILS_ENV: production

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Use a persistent storage volume for sqlite database files and local Active Storage files.
volumes:
  - "spiritual_citations_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:15
    host: railway.app
    port: "5432"
    env:
      clear:
        POSTGRES_DB: spiritual_citations_production
      secret:
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data